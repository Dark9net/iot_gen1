import 'package:flutter/material.dart';
import 'package:mqtt_client/mqtt_client.dart';
import 'package:flutter/services.dart';
import 'package:mqtt_client/mqtt_server_client.dart';
import 'dart:convert'; // Import for JSON decoding
import 'dart:io';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Smart Home Solution',
      themeMode: ThemeMode.dark,
      darkTheme: ThemeData.dark(),
      home: MQTTClient(),
    );
  }
}

class MQTTClient extends StatefulWidget {
  const MQTTClient({Key? key}) : super(key: key);

  @override
  _MQTTClientState createState() => _MQTTClientState();
}

class _MQTTClientState extends State<MQTTClient> {
  String statusText = "Status Text";
  bool isConnected = false;
  TextEditingController idTextController = TextEditingController();
  double temperature = 0.0;
  int humidity = 0;
  double soilMoisture = 0.0;

  final MqttServerClient client =
  MqttServerClient('a2ab8m2ptljxzx-ats.iot.eu-north-1.amazonaws.com', '');

  @override
  void dispose() {
    idTextController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('AWS IoT Data Viewer')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Humidity: $humidity %'),
            Text('Temperature: $temperature °C'),
            Text('Soil Moisture: $soilMoisture %'),
            ElevatedButton(
              onPressed: _connect,
              child: Text('Connect'),
            ),
            ElevatedButton(
              onPressed: _disconnect,
              child: Text('Disconnect'),
            ),
          ],
        ),
      ),
    );
  }

  _connect() async {
    if (idTextController.text.trim().isNotEmpty) {
      isConnected = await mqttConnect(idTextController.text.trim());
    }
  }

  _disconnect() {
    client.disconnect();
  }

  Future<bool> mqttConnect(String uniqueId) async {
    setStatus("Connecting MQTT Broker");

      ByteData rootCA = await rootBundle.load('assets/certs/amazon_root_ca.pem');
      ByteData deviceCert = await rootBundle.load('assets/certs/device_cert.crt');
      ByteData privateKey = await rootBundle.load('assets/certs/private_key.key');

      SecurityContext context = SecurityContext.defaultContext;
      context.setClientAuthoritiesBytes(rootCA.buffer.asUint8List());
      context.useCertificateChainBytes(deviceCert.buffer.asUint8List());
      context.usePrivateKeyBytes(privateKey.buffer.asUint8List());

      client.securityContext = context;

      client.logging(on: true);
      client.keepAlivePeriod = 60;
      client.port = 8883;
      client.secure = true;
      client.onConnected = onConnected;
      client.onDisconnected = onDisconnected;
      client.pongCallback = pong;

      final MqttConnectMessage connMess =
      MqttConnectMessage().withClientIdentifier(uniqueId).startClean();
      client.connectionMessage = connMess;

    await client.connect();
    if (client.connectionStatus!.state == MqttConnectionState.connected) {
      print("Connected to AWS Successfully!");
      const topic = 'sensors/pub';
      client.subscribe(topic, MqttQos.atMostOnce);

      // Set up message listener
      client.updates!.listen((List<MqttReceivedMessage<MqttMessage>>? c) {
        final MqttPublishMessage recMess =
        c![0].payload as MqttPublishMessage;
        final String message =
        MqttPublishPayload.bytesToStringAsString(recMess.payload.message!);

        Map<String, dynamic> jsonData = jsonDecode(message);

        double receivedTemperature = jsonData['humidity'];
        int receivedHumidity = jsonData['temperature'];
        double receivedSoilMoisture = jsonData['soil_moisture'];

        setState(() {
          humidity = receivedHumidity;
          temperature = receivedTemperature;
          soilMoisture = receivedSoilMoisture;
        });
      });
    } else {
      print("Connection to AWS failed: ${client.connectionStatus}");
      return false;
    }
    return true;
  }

  void setStatus(String content) {
    setState(() {
      statusText = content;
    });
  }
  void onConnected() {
    print('Connected to AWS IoT');
    client.subscribe('sensors/sub', MqttQos.atMostOnce);
    client.updates!.listen((List<MqttReceivedMessage<MqttMessage>>? c) {
      final MqttPublishMessage recMess = c![0].payload as MqttPublishMessage;
      final String message =
      MqttPublishPayload.bytesToStringAsString(recMess.payload.message!);

      setState(() {
        sensorData = jsonDecode(message);
      });import 'package:flutter/material.dart';
import 'package:mqtt_client/mqtt_client.dart';
import 'package:flutter/services.dart';
import 'package:mqtt_client/mqtt_server_client.dart';
import 'dart:convert'; // Import for JSON decoding
import 'dart:io';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'AWS IoT Data Viewer',
      theme: ThemeData.dark(),
      home: MQTTClient(),
    );
  }
}

class MQTTClient extends StatefulWidget {
  @override
  _MQTTClientState createState() => _MQTTClientState();
}

class _MQTTClientState extends State<MQTTClient> {
  late MqttClient client;
  late Map<String, dynamic> sensorData;

  @override
  void initState() {
    super.initState();
    sensorData = {
      'temperature': 0,
      'humidity': 0,
      'soil_moisture': 0,
    };
    connectToMQTT();
  }

  void connectToMQTT() async {
    client = MqttClient('your-aws-endpoint', ''); // Add your AWS IoT endpoint
    ByteData rootCA = await rootBundle.load('assets/certs/amazon_root_ca.pem');
    ByteData deviceCert = await rootBundle.load('assets/certs/device_cert.crt');
    ByteData privateKey = await rootBundle.load('assets/certs/private_key.key');

    SecurityContext context = SecurityContext.defaultContext;
    context.setClientAuthoritiesBytes(rootCA.buffer.asUint8List());
    context.useCertificateChainBytes(deviceCert.buffer.asUint8List());
    context.usePrivateKeyBytes(privateKey.buffer.asUint8List());

    client.securityContext = context;

    client.logging(on: true);
    client.keepAlivePeriod = 60;
    client.port = 8883;
    client.secure = true;
    client.onConnected = onConnected;
    client.onDisconnected = onDisconnected;
    client.pongCallback = pong;

    final MqttConnectMessage connectMessage = MqttConnectMessage()
        .withClientIdentifier(clientId)
        .startClean()
        .keepAliveFor(60) // Keep alive interval in seconds
        .withWillTopic('willtopic')
        .withWillMessage('Will message')
        .withWillQos(MqttQos.atLeastOnce);

    try {
      await client.connect();
    } catch (e) {
      print('Exception: $e');
      client.disconnect();
    }
  }

  void onConnected() {
    print('Connected to AWS IoT');
    client.subscribe('sensors/sub', MqttQos.atMostOnce);
    client.updates!.listen((List<MqttReceivedMessage<MqttMessage>>? c) {
      final MqttPublishMessage recMess = c![0].payload as MqttPublishMessage;
      final String message =
      MqttPublishPayload.bytesToStringAsString(recMess.payload.message!);

      setState(() {
        sensorData = jsonDecode(message);
      });
    });
  }

  void onDisconnected() {
    print('Disconnected from AWS IoT');
  }

  void onSubscribed(String topic) {
    print('Subscribed to topic: $topic');
  }

  void onUnsubscribed(String? topic) {
    print('Unsubscribed from topic: $topic');
  }

  void onSubscribeFail(String topic) {
    print('Failed to subscribe to topic: $topic');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('AWS IoT Data Viewer')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Temperature: ${sensorData['temperature']} °C'),
            Text('Humidity: ${sensorData['humidity']} %'),
            Text('Soil Moisture: ${sensorData['soil_moisture']} %'),
            // Add buttons or other UI elements here if needed
          ],
        ),
      ),
    );
  }
}

    });
  }

  void onDisconnected() {
    setStatus("Client Disconnected");
    isConnected = false;
  }

  void pong() {
    print('Ping response client callback invoked');
  }
}
